{
    "zadaci": [
        {
            "z": " Napisati SQL upit kojim se za rokove u kojima su održani ispiti iz manje od 25 različitih predmeta, izdvajaju sledeće informacije: <ul><li>naziv ispitnog roka </li><li>broj različitih studenata koji su izašli na neki ispit u tom roku </li><li>broj predmeta iz kojih su održani ispiti u tom roku </li><li>koji procenat od broja pod 3. stavkom čine predmeti na kojima u tom roku niko nije dobio ocenu 10</li></ul> Uzeti u obzir i ispitne rokove u kojima nisu držani ispiti. Nedostajuće vrednosti zameniti sa 0 ili 0.0. ",
            "r": [
                "WITH BEZ_DESETKI AS (<br><tab></tab>SELECT SKGODINA, OZNAKAROKA, COUNT(DISTINCT IDPREDMETA) BR<br><tab></tab>FROM DA.ISPIT I<br><tab></tab>WHERE NOT EXISTS(<br><tab></tab><tab></tab>SELECT *<br><tab></tab><tab></tab>FROM DA.ISPIT I1<br><tab></tab><tab></tab>WHERE I1.SKGODINA=I.SKGODINA AND I1.OZNAKAROKA=I.OZNAKAROKA<br><tab></tab><tab></tab><tab></tab>AND OCENA=10 AND STATUS='o' AND I1.IDPREDMETA=I.IDPREDMETA<br><tab></tab>)<br><tab></tab>GROUP BY SKGODINA, OZNAKAROKA<br>)<br>SELECT IR.NAZIV, COUNT(*) UKUPNOISPITA, COUNT(DISTINCT I.IDPREDMETA) RAZLICITIHPREDMETA, COUNT(DISTINCT INDEKS) RAZLICITIHSTUDENATA, <br><tab></tab>CASE WHEN COUNT(DISTINCT I.IDPREDMETA)=0<br><tab></tab><tab></tab>THEN 0<br><tab></tab>ELSE<br><tab></tab><tab></tab>COALESCE(BD.BR, 0.0)*100.0/COUNT(DISTINCT I.IDPREDMETA) <br><tab></tab>END PROCENAT_BEZ_10<br>FROM DA.ISPIT I RIGHT JOIN DA.ISPITNIROK IR<br><tab></tab><tab></tab>ON IR.SKGODINA=I.SKGODINA AND IR.OZNAKAROKA=I.OZNAKAROKA<br><tab></tab>LEFT JOIN BEZ_DESETKI BD<br><tab></tab><tab></tab>ON BD.SKGODINA=IR.SKGODINA AND BD.OZNAKAROKA=IR.OZNAKAROKA<br>GROUP BY IR.SKGODINA, IR.OZNAKAROKA, IR.NAZIV, BD.BR<br>HAVING COUNT(DISTINCT I.IDPREDMETA)<25;"
            ]
        },
        {
            "z":"<ul><li>Napisati SQL naredbu kojom se pravi tabela diplomirani koja sadrži podatke o studentima koji su diplomirali na fakultetu. Tabela ima kolone:<ul><li>indeks - indeks studenta</li><li>datum - datum diplomiranja</li><li>prosek - prosečna ocena na položenim ispitima studenta</li><li>duzina_studiranja - dužina studiranja studenta. Računa se kao broj dana od datuma upisa na fakultet do dana kada je student diplomirao.</ul></li>Definisati i primarni ključ za tabelu diplomirani. Primarni ključ se može definisati u okviru naredbe za pravljenje tabele ili kao posebna SQL naredba.</li><li>Napisati SQL naredbu koja u tabelu diplomirani unosi podatke za studente koji nikada nisu poništili ispit i koji su diplomirali na smeru za koji je predviđeno da ga studenti studiraju 4 godine. Uneti podatke u sve kolone tabele.</li><li>Napisati SQL naredbu koja menja tabelu diplomirani tako što studentima o kojima sadrži podatke i koji su studirali smer sa nazivom Matematika ažurira prosek, a unosi podatke o studentima koji su diplomirali i o kojima nema podataka u tabeli. Za diplomirane studente o kojima nema podataka uneti indeks, datum diplomiranja i prosek.</li><li>Napisati SQL naredbu koja iz tabele diplomirani briše podatke o studentima koji su fakultet upisali pre 2018. godine.</li><li>Napisati SQL naredbu koja briše tabelu diplomirani.</li></ul>",
            "r":[
                "DROP TABLE IF EXISTS DIPLOMIRANI; <br><br>CREATE TABLE DIPLOMIRANI (<br><tab></tab>INDEKS INTEGER,<br><tab></tab>DATUM DATE,<br><tab></tab>PROSEK DOUBLE,<br><tab></tab>DUZINA_STUDIRANJA INTEGER<br>);<br><br>ALTER TABLE DIPLOMIRANI<br>ALTER COLUMN INDEKS SET NOT NULL;<br><br>-- neophodno je reorganizovati tabelu sa db2 reorg table diplomirani<br><br>ALTER TABLE DIPLOMIRANI<br>ADD CONSTRAINT PK PRIMARY KEY (INDEKS);",
                "CREATE TABLE DIPLOMIRANI (<br><tab></tab>INDEKS INTEGER NOT NULL,<br><tab></tab>DATUM DATE,<br><tab></tab>PROSEK DOUBLE,<br><tab></tab>DUZINA_STUDIRANJA INTEGER,<br><tab></tab>PRIMARY KEY (INDEKS)<br>);",
                "INSERT INTO DIPLOMIRANI<br>SELECT D.INDEKS, D.DATDIPLOMIRANJA, AVG(OCENA*1.0), DAYS_BETWEEN(DATDIPLOMIRANJA, DATUPISA)<br>FROM DA.DOSIJE D JOIN DA.STUDIJSKIPROGRAM SP<br><tab></tab><tab></tab>ON D.IDPROGRAMA = SP.ID AND OBIMESPB=240 <br><tab></tab>JOIN DA.ISPIT I<br><tab></tab><tab></tab>ON I.INDEKS=D.INDEKS AND I.STATUS='o' AND I.OCENA>5<br>WHERE D.DATDIPLOMIRANJA IS NOT NULL AND NOT EXISTS (<br><tab></tab>SELECT *<br><tab></tab>FROM DA.ISPIT I<br><tab></tab>WHERE D.INDEKS=I.INDEKS AND I.STATUS='x'<br>)<br>GROUP BY D.INDEKS, D.DATDIPLOMIRANJA, D.DATUPISA;",
                "MERGE INTO DIPLOMIRANI D<br>USING (<br><tab></tab>SELECT D.INDEKS, D.DATDIPLOMIRANJA DATDIPLOMIRANJA, AVG(OCENA*1.0) PROSEK, SP.NAZIV PROGRAM<br><tab></tab>FROM DA.DOSIJE D JOIN DA.STUDIJSKIPROGRAM SP<br><tab></tab><tab></tab><tab></tab>ON D.IDPROGRAMA = SP.ID <br><tab></tab><tab></tab>JOIN DA.ISPIT I<br><tab></tab><tab></tab><tab></tab>ON I.INDEKS=D.INDEKS AND I.STATUS='o' AND I.OCENA>5<br><tab></tab>WHERE D.DATDIPLOMIRANJA IS NOT NULL <br><tab></tab>GROUP BY D.INDEKS, D.DATDIPLOMIRANJA, D.DATUPISA, SP.NAZIV) AS TMP<br>ON D.INDEKS=TMP.INDEKS<br>WHEN MATCHED AND PROGRAM='Matematika' THEN<br><tab></tab>UPDATE <br><tab></tab>SET PROSEK=TMP.PROSEK<br>WHEN NOT MATCHED THEN<br><tab></tab>INSERT(INDEKS, DATUM, PROSEK)<br><tab></tab>VALUES (TMP.INDEKS, TMP.DATDIPLOMIRANJA, TMP.PROSEK);",
                "DELETE FROM DIPLOMIRANI<br>WHERE INDEKS IN (<br><tab></tab>SELECT INDEKS<br><tab></tab>FROM DA.DOSIJE<br><tab></tab>WHERE YEAR(DATDIPLOMIRANJA) < 2018<br>);",
                "DROP TABLE DIPLOMIRANI;"
            ],
            "n": "<b>Prvi način pravljenja tabele:</b> Ako naknadno dodajemo primarni ključ treba obratiti pažnu da li kolona koju stavljamo kao primarni ključ može da bude null. Ako da, neophodno je označiti je kao NOT NULL. To smo mogli uraditi pri samom kreiranju tabele. Ovde smo to uradili naknadno pa je nakon postavljanja kolone za NOT NULL, a pre postavljanja za primarni ključ u terminalu neophodno izvrštiti komandu 'db2 reorg table diplomirani' (prethodno se potrebno povezati na odgovarajuću bazu). Ukoliko ne uradimo ovo javiće se greška sa kodom 7.<br><b>Druga tačka: </b> Umesto days_between smo mogli koristiti 'DAYS(DATDIPLOMIRANJA) - DAYS(DATUPISA)'."
        },
        {
            "z": "Napisati SQL upit kojim se izdvajaju informacije o svim studentima smerova Numericka matematika i optimizacija, Astronomija i astrofizika i Analiza, za koje važi da je najveći položeni predmet po ESPB bodovima do sada ujedno i obavezni predmet sa njihovog smera. Izdvoiti indeks, ime i prezime studenta u obliku ime razmak prezime, kao i naziv smera. Rezultat upita urediti po indeksu u opadajućem poretku. ",
            "r":[
                "SELECT D.INDEKS, IME || ' ' || PREZIME, SP.NAZIV<br>FROM DA.DOSIJE D JOIN DA.STUDIJSKIPROGRAM SP<br><tab></tab>ON D.IDPROGRAMA = SP.ID<br>WHERE SP.NAZIV IN ('Numericka matematika i optimizacija', 'Astronomija i astrofizika', 'Analiza')<br><tab></tab>AND EXISTS (<br><tab></tab><tab></tab>SELECT * <br><tab></tab><tab></tab>FROM DA.ISPIT I JOIN DA.PREDMET P<br><tab></tab><tab></tab><tab></tab><tab></tab>ON I.IDPREDMETA=P.ID AND I.OCENA>5 AND STATUS='o'<br><tab></tab><tab></tab><tab></tab>JOIN DA.PREDMETPROGRAMA PP<br><tab></tab><tab></tab><tab></tab><tab></tab>ON PP.IDPREDMETA=P.ID AND PP.VRSTA='obavezan' AND PP.IDPROGRAMA=D.IDPROGRAMA<br><tab></tab><tab></tab>WHERE I.INDEKS=D.INDEKS AND<br><tab></tab><tab></tab><tab></tab>P.ESPB = (<br><tab></tab><tab></tab><tab></tab><tab></tab>SELECT MAX(P1.ESPB)<br><tab></tab><tab></tab><tab></tab><tab></tab>FROM DA.ISPIT I1 JOIN DA.PREDMET P1<br><tab></tab><tab></tab><tab></tab><tab></tab><tab></tab>ON I1.IDPREDMETA=P1.ID<br><tab></tab><tab></tab><tab></tab><tab></tab>WHERE I1.OCENA>5 AND I1.STATUS='o' AND I1.INDEKS=D.INDEKS<br><tab></tab><tab></tab><tab></tab>)<br><tab></tab>)<br>ORDER BY INDEKS DESC;"
            ]
        }
    ]
}
