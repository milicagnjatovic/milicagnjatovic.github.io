-- I GRUPA

-- 2.
WITH MESTA AS (
	SELECT MESTORODJENJA, COALESCE(AVG(OCENA*1.0), 5.0) PROSEK
	FROM DA.DOSIJE D LEFT JOIN DA.ISPIT I
		ON D.DATDIPLOMIRANJA IS NOT NULL AND D.INDEKS=I.INDEKS AND OCENA>5 AND STATUS='o'
	GROUP BY MESTORODJENJA)
SELECT D.INDEKS, IME || ' ' || PREZIME "Ime prezime", D.MESTORODJENJA,   AVG(OCENA*1.0) - M.PROSEK "Razlika proseka mesta i proseka studenta"
FROM DA.DOSIJE D JOIN MESTA M
		ON D.MESTORODJENJA=M.MESTORODJENJA
	JOIN DA.ISPIT I
		ON I.INDEKS=D.INDEKS AND I.OCENA>5 AND I.STATUS='o'
WHERE 
	-- CURRENT DATE > DATUPISA + 4 YEARS
	-- YEAR(CURRENT DATE - DATUPISA) > 4 
	4 < (   SELECT COUNT(DISTINCT SKGODINA)   FROM DA.UPISGODINE UG   WHERE UG.INDEKS = D.INDEKS  )
	AND DATDIPLOMIRANJA IS NULL
GROUP BY D.INDEKS, D.IME, D.PREZIME, M.PROSEK, D.MESTORODJENJA
HAVING AVG(OCENA*1.0)>M.PROSEK
ORDER BY MESTORODJENJA ASC, 4 DESC;

-- 3.
--a) 
CREATE TABLE STUDENT_INFO (
	INDEKS INTEGER NOT NULL PRIMARY KEY,
	MEJL VARCHAR(50),
	MAX_OCENA SMALLINT,
	MIN_OCENA SMALLINT,
	ARITMETICKA_SREDINA DOUBLE DEFAULT 5.0
);

--b)
CREATE OR REPLACE FUNCTION MEJL_ADRESA(I INTEGER)
RETURNS VARCHAR(40)
RETURN 
	SELECT LOWER(IME || '.' || PREZIME || '.' || SUBSTRING(NAZIV, 1, 1)) --|| IDNIVOA || '@student.matf'
	FROM DA.DOSIJE D JOIN DA.STUDIJSKIPROGRAM SP
		ON D.IDPROGRAMA=SP.ID
	WHERE INDEKS = I;

--c)
CREATE TRIGGER UNOS
BEFORE INSERT
ON STUDENT_INFO
REFERENCING NEW AS N
FOR EACH ROW
WHEN (N.MIN_OCENA IS NULL AND N.MAX_OCENA IS NULL)
BEGIN ATOMIC
	SET N.MIN_OCENA = (
		SELECT MIN(OCENA)
		FROM DA.ISPIT
		WHERE INDEKS=N.INDEKS AND OCENA>5 AND STATUS='o');
	
	SET N.MAX_OCENA = (
		SELECT MAX(OCENA)
		FROM DA.ISPIT
		WHERE INDEKS=N.INDEKS AND OCENA>5 AND STATUS='o');
		
	SET N.ARITMETICKA_SREDINA = (N.MIN_OCENA + N.MAX_OCENA)/2.0; 
END@

--d)
INSERT INTO STUDENT_INFO(INDEKS, MEJL)
SELECT INDEKS, MEJL_ADRESA(INDEKS)
FROM DA.DOSIJE D JOIN DA.STUDENTSKISTATUS SS
	ON D.IDSTATUSA=SS.ID
WHERE SS.NAZIV='Samofinansiranje';

--e)
DELETE FROM STUDENT_INFO SI
WHERE SI.MAX_OCENA=SI.MIN_OCENA OR SI.ARITMETICKA_SREDINA IS NULL;

-- II GRUPA

-- 2.
WITH MESTA AS (
	SELECT MESTORODJENJA, COALESCE(AVG(OCENA*1.0), 5.0) PROSEK
	FROM DA.DOSIJE D LEFT JOIN DA.ISPIT I
		ON D.DATDIPLOMIRANJA IS NOT NULL AND D.INDEKS=I.INDEKS AND OCENA>5 AND STATUS='o'
	GROUP BY MESTORODJENJA)
SELECT D.INDEKS, IME || ' ' || PREZIME "Ime prezime", D.MESTORODJENJA,   ABS(AVG(OCENA*1.0) - M.PROSEK) "Razlika proseka mesta i proseka studenta"
FROM DA.DOSIJE D JOIN MESTA M
		ON D.MESTORODJENJA=M.MESTORODJENJA
	JOIN DA.ISPIT I
		ON I.INDEKS=D.INDEKS AND I.OCENA>5 AND I.STATUS='o'
WHERE -- YEAR(CURRENT DATE - DATUPISA) = 5
	5=(
		SELECT COUNT(*)
		FROM DA.UPISGODINE AS "UG"
		WHERE UG.INDEKS=D.INDEKS
	)
	AND DATDIPLOMIRANJA IS NOT NULL
GROUP BY D.INDEKS, D.IME, D.PREZIME, M.PROSEK, D.MESTORODJENJA
HAVING AVG(OCENA*1.0) BETWEEN M.PROSEK-1.0 AND M.PROSEK + 1.0
ORDER BY MESTORODJENJA ASC, 4 DESC;

-- 3.
--a)
CREATE TABLE STUDENT_INFO (
	INDEKS INTEGER NOT NULL PRIMARY KEY,
	MEJL VARCHAR(50),
	MAX_OCENA SMALLINT,
	MIN_OCENA SMALLINT,
	KOMENTAR VARCHAR(50) DEFAULT  '-'
);

--b)
CREATE FUNCTION MEJL_ADRESA(I INTEGER)
RETURNS VARCHAR(50)
RETURN 
	SELECT LOWER(IME || '.' || PREZIME || '.' || SUBSTRING(NAZIV, 1, 1)) || IDNIVOA || '@student.matf'
	FROM DA.DOSIJE D JOIN DA.STUDIJSKIPROGRAM SP
		ON D.IDPROGRAMA=SP.ID
	WHERE INDEKS = I;

--c)
CREATE TRIGGER UNOS
BEFORE INSERT
ON STUDENT_INFO
REFERENCING NEW AS N
FOR EACH ROW
WHEN (N.MIN_OCENA IS NULL AND N.MAX_OCENA IS NULL)
BEGIN ATOMIC
	SET N.MIN_OCENA = (
		SELECT MIN(OCENA)
		FROM DA.ISPIT
		WHERE INDEKS=N.INDEKS AND OCENA>5 AND STATUS='o');
	
	SET N.MAX_OCENA = (
		SELECT MAX(OCENA)
		FROM DA.ISPIT
		WHERE INDEKS=N.INDEKS AND OCENA>5 AND STATUS='o');
		
	SET N.KOMENTAR = CASE WHEN (SELECT COUNT(*) FROM DA.ISPIT W WHERE INDEKS=N.INDEKS AND OCENA>5 AND STATUS='o') <= 1 THEN
			'Student ima manje od dve ocene'
		ELSE 'Student je poloÅ¾io bar dva predmeta' END; 
END@

--d)
INSERT INTO STUDENT_INFO(INDEKS, MEJL)
SELECT INDEKS, MEJL_ADRESA(INDEKS)
FROM DA.DOSIJE D JOIN DA.STUDENTSKISTATUS SS
	ON D.IDSTATUSA=SS.ID
WHERE SS.NAZIV='Budzet';

--e)
DELETE FROM STUDENT_INFO SI
WHERE SI.MAX_OCENA=SI.MIN_OCENA OR SI.ARITMETICKA_SREDINA IS NULL;